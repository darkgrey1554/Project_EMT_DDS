// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DdsStatusTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "DdsStatus.h"
#include "DdsStatusTypeObject.h"
#include <utility>
#include <sstream>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastrtps/types/AnnotationParameterValue.h>
#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps::rtps;

void registerDdsStatusTypes()
{
    TypeObjectFactory *factory = TypeObjectFactory::get_instance();
    factory->add_type_object("DdsStatus", GetDdsStatusIdentifier(true),
    GetDdsStatusObject(true));
    factory->add_type_object("DdsStatus", GetDdsStatusIdentifier(false),
    GetDdsStatusObject(false));

}

const TypeIdentifier* GetDdsStatusIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("DdsStatus", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetDdsStatusObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("DdsStatus", complete);
}

const TypeObject* GetDdsStatusObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DdsStatus", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteDdsStatusObject();
    }
    //else
    return GetMinimalDdsStatusObject();
}

const TypeObject* GetMinimalDdsStatusObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DdsStatus", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_st_time;
    mst_st_time.common().member_id(memberId++);
    mst_st_time.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_st_time.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_st_time.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_st_time.common().member_flags().IS_OPTIONAL(false);
    mst_st_time.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_st_time.common().member_flags().IS_KEY(false);
    mst_st_time.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_st_time.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int64_t", false));

    MD5 st_time_hash("st_time");
    for(int i = 0; i < 4; ++i)
    {
        mst_st_time.detail().name_hash()[i] = st_time_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_st_time);

    MinimalStructMember mst_id_source;
    mst_id_source.common().member_id(memberId++);
    mst_id_source.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_id_source.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_id_source.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_id_source.common().member_flags().IS_OPTIONAL(false);
    mst_id_source.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_id_source.common().member_flags().IS_KEY(false);
    mst_id_source.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_id_source.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

    MD5 id_source_hash("id_source");
    for(int i = 0; i < 4; ++i)
    {
        mst_id_source.detail().name_hash()[i] = id_source_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_id_source);

    MinimalStructMember mst_id_target;
    mst_id_target.common().member_id(memberId++);
    mst_id_target.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_id_target.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_id_target.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_id_target.common().member_flags().IS_OPTIONAL(false);
    mst_id_target.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_id_target.common().member_flags().IS_KEY(false);
    mst_id_target.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_id_target.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

    MD5 id_target_hash("id_target");
    for(int i = 0; i < 4; ++i)
    {
        mst_id_target.detail().name_hash()[i] = id_target_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_id_target);

    MinimalStructMember mst_cmd_code;
    mst_cmd_code.common().member_id(memberId++);
    mst_cmd_code.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_cmd_code.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_cmd_code.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_cmd_code.common().member_flags().IS_OPTIONAL(false);
    mst_cmd_code.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_cmd_code.common().member_flags().IS_KEY(false);
    mst_cmd_code.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_cmd_code.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

    MD5 cmd_code_hash("cmd_code");
    for(int i = 0; i < 4; ++i)
    {
        mst_cmd_code.detail().name_hash()[i] = cmd_code_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_cmd_code);

    MinimalStructMember mst_st_code;
    mst_st_code.common().member_id(memberId++);
    mst_st_code.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_st_code.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_st_code.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_st_code.common().member_flags().IS_OPTIONAL(false);
    mst_st_code.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_st_code.common().member_flags().IS_KEY(false);
    mst_st_code.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_st_code.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

    MD5 st_code_hash("st_code");
    for(int i = 0; i < 4; ++i)
    {
        mst_st_code.detail().name_hash()[i] = st_code_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_st_code);

    MinimalStructMember mst_st_desc;
    mst_st_desc.common().member_id(memberId++);
    mst_st_desc.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_st_desc.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_st_desc.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_st_desc.common().member_flags().IS_OPTIONAL(false);
    mst_st_desc.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_st_desc.common().member_flags().IS_KEY(false);
    mst_st_desc.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_st_desc.common().member_type_id(*TypeObjectFactory::get_instance()->get_array_identifier("char", {1024}, false));


    MD5 st_desc_hash("st_desc");
    for(int i = 0; i < 4; ++i)
    {
        mst_st_desc.detail().name_hash()[i] = st_desc_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_st_desc);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DdsStatus", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DdsStatus", false);
}

const TypeObject* GetCompleteDdsStatusObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DdsStatus", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_st_time;
    cst_st_time.common().member_id(memberId++);
    cst_st_time.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_st_time.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_st_time.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_st_time.common().member_flags().IS_OPTIONAL(false);
    cst_st_time.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_st_time.common().member_flags().IS_KEY(false);
    cst_st_time.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_st_time.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int64_t", false));

    cst_st_time.detail().name("st_time");

    type_object->complete().struct_type().member_seq().emplace_back(cst_st_time);

    CompleteStructMember cst_id_source;
    cst_id_source.common().member_id(memberId++);
    cst_id_source.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_id_source.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_id_source.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_id_source.common().member_flags().IS_OPTIONAL(false);
    cst_id_source.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_id_source.common().member_flags().IS_KEY(false);
    cst_id_source.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_id_source.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

    cst_id_source.detail().name("id_source");

    type_object->complete().struct_type().member_seq().emplace_back(cst_id_source);

    CompleteStructMember cst_id_target;
    cst_id_target.common().member_id(memberId++);
    cst_id_target.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_id_target.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_id_target.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_id_target.common().member_flags().IS_OPTIONAL(false);
    cst_id_target.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_id_target.common().member_flags().IS_KEY(false);
    cst_id_target.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_id_target.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

    cst_id_target.detail().name("id_target");

    type_object->complete().struct_type().member_seq().emplace_back(cst_id_target);

    CompleteStructMember cst_cmd_code;
    cst_cmd_code.common().member_id(memberId++);
    cst_cmd_code.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_cmd_code.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_cmd_code.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_cmd_code.common().member_flags().IS_OPTIONAL(false);
    cst_cmd_code.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_cmd_code.common().member_flags().IS_KEY(false);
    cst_cmd_code.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_cmd_code.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

    cst_cmd_code.detail().name("cmd_code");

    type_object->complete().struct_type().member_seq().emplace_back(cst_cmd_code);

    CompleteStructMember cst_st_code;
    cst_st_code.common().member_id(memberId++);
    cst_st_code.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_st_code.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_st_code.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_st_code.common().member_flags().IS_OPTIONAL(false);
    cst_st_code.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_st_code.common().member_flags().IS_KEY(false);
    cst_st_code.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_st_code.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

    cst_st_code.detail().name("st_code");

    type_object->complete().struct_type().member_seq().emplace_back(cst_st_code);

    CompleteStructMember cst_st_desc;
    cst_st_desc.common().member_id(memberId++);
    cst_st_desc.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_st_desc.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_st_desc.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_st_desc.common().member_flags().IS_OPTIONAL(false);
    cst_st_desc.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_st_desc.common().member_flags().IS_KEY(false);
    cst_st_desc.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_st_desc.common().member_type_id(*TypeObjectFactory::get_instance()->get_array_identifier("char", {1024}, true));


    cst_st_desc.detail().name("st_desc");

    type_object->complete().struct_type().member_seq().emplace_back(cst_st_desc);


    // Header
    type_object->complete().struct_type().header().detail().type_name("DdsStatus");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DdsStatus", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DdsStatus", true);
}
