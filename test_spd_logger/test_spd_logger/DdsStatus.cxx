// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DdsStatus.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DdsStatus.h"
#include "DdsStatusTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

DdsStatus::DdsStatus()
{
    // m_st_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5f2108b5
    m_st_time = 0;
    // m_id_source com.eprosima.idl.parser.typecode.PrimitiveTypeCode@31a5c39e
    m_id_source = 0;
    // m_id_target com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3f49dace
    m_id_target = 0;
    // m_cmd_code com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1e397ed7
    m_cmd_code = 0;
    // m_st_code com.eprosima.idl.parser.typecode.PrimitiveTypeCode@490ab905
    m_st_code = 0;
    // m_st_desc com.eprosima.idl.parser.typecode.ArrayTypeCode@56ac3a89
    memset(&m_st_desc, 0, (1024) * 1);

    // Just to register all known types
    registerDdsStatusTypes();
}

DdsStatus::~DdsStatus()
{






}

DdsStatus::DdsStatus(
        const DdsStatus& x)
{
    m_st_time = x.m_st_time;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_cmd_code = x.m_cmd_code;
    m_st_code = x.m_st_code;
    m_st_desc = x.m_st_desc;
}

DdsStatus::DdsStatus(
        DdsStatus&& x)
{
    m_st_time = x.m_st_time;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_cmd_code = x.m_cmd_code;
    m_st_code = x.m_st_code;
    m_st_desc = std::move(x.m_st_desc);
}

DdsStatus& DdsStatus::operator =(
        const DdsStatus& x)
{

    m_st_time = x.m_st_time;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_cmd_code = x.m_cmd_code;
    m_st_code = x.m_st_code;
    m_st_desc = x.m_st_desc;

    return *this;
}

DdsStatus& DdsStatus::operator =(
        DdsStatus&& x)
{

    m_st_time = x.m_st_time;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_cmd_code = x.m_cmd_code;
    m_st_code = x.m_st_code;
    m_st_desc = std::move(x.m_st_desc);

    return *this;
}

bool DdsStatus::operator ==(
        const DdsStatus& x) const
{

    return (m_st_time == x.m_st_time && m_id_source == x.m_id_source && m_id_target == x.m_id_target && m_cmd_code == x.m_cmd_code && m_st_code == x.m_st_code && m_st_desc == x.m_st_desc);
}

bool DdsStatus::operator !=(
        const DdsStatus& x) const
{
    return !(*this == x);
}

size_t DdsStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((1024) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t DdsStatus::getCdrSerializedSize(
        const DdsStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((1024) > 0)
    {
        current_alignment += ((1024) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }


    return current_alignment - initial_alignment;
}

void DdsStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_st_time;
    scdr << m_id_source;
    scdr << m_id_target;
    scdr << m_cmd_code;
    scdr << m_st_code;
    scdr << m_st_desc;


}

void DdsStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_st_time;
    dcdr >> m_id_source;
    dcdr >> m_id_target;
    dcdr >> m_cmd_code;
    dcdr >> m_st_code;
    dcdr >> m_st_desc;

}

/*!
 * @brief This function sets a value in member st_time
 * @param _st_time New value for member st_time
 */
void DdsStatus::st_time(
        int64_t _st_time)
{
    m_st_time = _st_time;
}

/*!
 * @brief This function returns the value of member st_time
 * @return Value of member st_time
 */
int64_t DdsStatus::st_time() const
{
    return m_st_time;
}

/*!
 * @brief This function returns a reference to member st_time
 * @return Reference to member st_time
 */
int64_t& DdsStatus::st_time()
{
    return m_st_time;
}

/*!
 * @brief This function sets a value in member id_source
 * @param _id_source New value for member id_source
 */
void DdsStatus::id_source(
        uint32_t _id_source)
{
    m_id_source = _id_source;
}

/*!
 * @brief This function returns the value of member id_source
 * @return Value of member id_source
 */
uint32_t DdsStatus::id_source() const
{
    return m_id_source;
}

/*!
 * @brief This function returns a reference to member id_source
 * @return Reference to member id_source
 */
uint32_t& DdsStatus::id_source()
{
    return m_id_source;
}

/*!
 * @brief This function sets a value in member id_target
 * @param _id_target New value for member id_target
 */
void DdsStatus::id_target(
        uint32_t _id_target)
{
    m_id_target = _id_target;
}

/*!
 * @brief This function returns the value of member id_target
 * @return Value of member id_target
 */
uint32_t DdsStatus::id_target() const
{
    return m_id_target;
}

/*!
 * @brief This function returns a reference to member id_target
 * @return Reference to member id_target
 */
uint32_t& DdsStatus::id_target()
{
    return m_id_target;
}

/*!
 * @brief This function sets a value in member cmd_code
 * @param _cmd_code New value for member cmd_code
 */
void DdsStatus::cmd_code(
        uint32_t _cmd_code)
{
    m_cmd_code = _cmd_code;
}

/*!
 * @brief This function returns the value of member cmd_code
 * @return Value of member cmd_code
 */
uint32_t DdsStatus::cmd_code() const
{
    return m_cmd_code;
}

/*!
 * @brief This function returns a reference to member cmd_code
 * @return Reference to member cmd_code
 */
uint32_t& DdsStatus::cmd_code()
{
    return m_cmd_code;
}

/*!
 * @brief This function sets a value in member st_code
 * @param _st_code New value for member st_code
 */
void DdsStatus::st_code(
        uint32_t _st_code)
{
    m_st_code = _st_code;
}

/*!
 * @brief This function returns the value of member st_code
 * @return Value of member st_code
 */
uint32_t DdsStatus::st_code() const
{
    return m_st_code;
}

/*!
 * @brief This function returns a reference to member st_code
 * @return Reference to member st_code
 */
uint32_t& DdsStatus::st_code()
{
    return m_st_code;
}

/*!
 * @brief This function copies the value in member st_desc
 * @param _st_desc New value to be copied in member st_desc
 */
void DdsStatus::st_desc(
        const std::array<char, 1024>& _st_desc)
{
    m_st_desc = _st_desc;
}

/*!
 * @brief This function moves the value in member st_desc
 * @param _st_desc New value to be moved in member st_desc
 */
void DdsStatus::st_desc(
        std::array<char, 1024>&& _st_desc)
{
    m_st_desc = std::move(_st_desc);
}

/*!
 * @brief This function returns a constant reference to member st_desc
 * @return Constant reference to member st_desc
 */
const std::array<char, 1024>& DdsStatus::st_desc() const
{
    return m_st_desc;
}

/*!
 * @brief This function returns a reference to member st_desc
 * @return Reference to member st_desc
 */
std::array<char, 1024>& DdsStatus::st_desc()
{
    return m_st_desc;
}

size_t DdsStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;









    return current_align;
}

bool DdsStatus::isKeyDefined()
{
    return false;
}

void DdsStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
          
}
