// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataDds.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DataDds.h"
#include "DataDdsTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

DataDDS::DataDDS()
{
    // m_size com.eprosima.idl.parser.typecode.PrimitiveTypeCode@23a5fd2
    m_size = 0;
    // m_size2 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@78a2da20
    m_size2 = 0;
    // m_vec_datai com.eprosima.idl.parser.typecode.SequenceTypeCode@dd3b207


    // Just to register all known types
    registerDataDdsTypes();
}

DataDDS::~DataDDS()
{



}

DataDDS::DataDDS(
        const DataDDS& x)
{
    m_size = x.m_size;
    m_size2 = x.m_size2;
    m_vec_datai = x.m_vec_datai;
}

DataDDS::DataDDS(
        DataDDS&& x)
{
    m_size = x.m_size;
    m_size2 = x.m_size2;
    m_vec_datai = std::move(x.m_vec_datai);
}

DataDDS& DataDDS::operator =(
        const DataDDS& x)
{

    m_size = x.m_size;
    m_size2 = x.m_size2;
    m_vec_datai = x.m_vec_datai;

    return *this;
}

DataDDS& DataDDS::operator =(
        DataDDS&& x)
{

    m_size = x.m_size;
    m_size2 = x.m_size2;
    m_vec_datai = std::move(x.m_vec_datai);

    return *this;
}

size_t DataDDS::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);




    return current_alignment - initial_alignment;
}

size_t DataDDS::getCdrSerializedSize(
        const DataDDS& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.vec_datai().size() > 0)
    {
        current_alignment += (data.vec_datai().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }




    return current_alignment - initial_alignment;
}

void DataDDS::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_size;
    scdr << m_size2;
    scdr << m_vec_datai;

}

void DataDDS::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_size;
    dcdr >> m_size2;
    dcdr >> m_vec_datai;
}

/*!
 * @brief This function sets a value in member size
 * @param _size New value for member size
 */
void DataDDS::size(
        int32_t _size)
{
    m_size = _size;
}

/*!
 * @brief This function returns the value of member size
 * @return Value of member size
 */
int32_t DataDDS::size() const
{
    return m_size;
}

/*!
 * @brief This function returns a reference to member size
 * @return Reference to member size
 */
int32_t& DataDDS::size()
{
    return m_size;
}

/*!
 * @brief This function sets a value in member size2
 * @param _size2 New value for member size2
 */
void DataDDS::size2(
        int32_t _size2)
{
    m_size2 = _size2;
}

/*!
 * @brief This function returns the value of member size2
 * @return Value of member size2
 */
int32_t DataDDS::size2() const
{
    return m_size2;
}

/*!
 * @brief This function returns a reference to member size2
 * @return Reference to member size2
 */
int32_t& DataDDS::size2()
{
    return m_size2;
}

/*!
 * @brief This function copies the value in member vec_datai
 * @param _vec_datai New value to be copied in member vec_datai
 */
void DataDDS::vec_datai(
        const std::vector<int32_t>& _vec_datai)
{
    m_vec_datai = _vec_datai;
}

/*!
 * @brief This function moves the value in member vec_datai
 * @param _vec_datai New value to be moved in member vec_datai
 */
void DataDDS::vec_datai(
        std::vector<int32_t>&& _vec_datai)
{
    m_vec_datai = std::move(_vec_datai);
}

/*!
 * @brief This function returns a constant reference to member vec_datai
 * @return Constant reference to member vec_datai
 */
const std::vector<int32_t>& DataDDS::vec_datai() const
{
    return m_vec_datai;
}

/*!
 * @brief This function returns a reference to member vec_datai
 * @return Reference to member vec_datai
 */
std::vector<int32_t>& DataDDS::vec_datai()
{
    return m_vec_datai;
}

size_t DataDDS::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool DataDDS::isKeyDefined()
{
    return false;
}

void DataDDS::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}
