// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataDds.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DATADDS_H_
#define _DATADDS_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DataDds_SOURCE)
#define DataDds_DllAPI __declspec( dllexport )
#else
#define DataDds_DllAPI __declspec( dllimport )
#endif // DataDds_SOURCE
#else
#define DataDds_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define DataDds_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure DataDDS defined by the user in the IDL file.
 * @ingroup DATADDS
 */

void setsizeint(int size_);
void setsizefloat(int size_);
int getsizeint();
int getsizefloat();

class DataDDS
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataDDS();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataDDS();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataDDS that will be copied.
     */
    eProsima_user_DllExport DataDDS(
            const DataDDS& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataDDS that will be copied.
     */
    eProsima_user_DllExport DataDDS(
            DataDDS&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataDDS that will be copied.
     */
    eProsima_user_DllExport DataDDS& operator =(
            const DataDDS& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataDDS that will be copied.
     */
    eProsima_user_DllExport DataDDS& operator =(
            DataDDS&& x);

    /*!
     * @brief This function sets a value in member size
     * @param _size New value for member size
     */
    eProsima_user_DllExport void size(
            int32_t _size);

    /*!
     * @brief This function returns the value of member size
     * @return Value of member size
     */
    eProsima_user_DllExport int32_t size() const;

    /*!
     * @brief This function returns a reference to member size
     * @return Reference to member size
     */
    eProsima_user_DllExport int32_t& size();

    /*!
     * @brief This function sets a value in member size2
     * @param _size2 New value for member size2
     */
    eProsima_user_DllExport void size2(
            int32_t _size2);

    /*!
     * @brief This function returns the value of member size2
     * @return Value of member size2
     */
    eProsima_user_DllExport int32_t size2() const;

    /*!
     * @brief This function returns a reference to member size2
     * @return Reference to member size2
     */
    eProsima_user_DllExport int32_t& size2();

    /*!
     * @brief This function copies the value in member vec_datai
     * @param _vec_datai New value to be copied in member vec_datai
     */
    eProsima_user_DllExport void vec_datai(
            const std::vector<int32_t>& _vec_datai);

    /*!
     * @brief This function moves the value in member vec_datai
     * @param _vec_datai New value to be moved in member vec_datai
     */
    eProsima_user_DllExport void vec_datai(
            std::vector<int32_t>&& _vec_datai);

    /*!
     * @brief This function returns a constant reference to member vec_datai
     * @return Constant reference to member vec_datai
     */
    eProsima_user_DllExport const std::vector<int32_t>& vec_datai() const;

    /*!
     * @brief This function returns a reference to member vec_datai
     * @return Reference to member vec_datai
     */
    eProsima_user_DllExport std::vector<int32_t>& vec_datai();
    /*!
     * @brief This function copies the value in member vec_dataf
     * @param _vec_dataf New value to be copied in member vec_dataf
     */
    eProsima_user_DllExport void vec_dataf(
            const std::vector<float>& _vec_dataf);

    /*!
     * @brief This function moves the value in member vec_dataf
     * @param _vec_dataf New value to be moved in member vec_dataf
     */
    eProsima_user_DllExport void vec_dataf(
            std::vector<float>&& _vec_dataf);

    /*!
     * @brief This function returns a constant reference to member vec_dataf
     * @return Constant reference to member vec_dataf
     */
    eProsima_user_DllExport const std::vector<float>& vec_dataf() const;

    /*!
     * @brief This function returns a reference to member vec_dataf
     * @return Reference to member vec_dataf
     */
    eProsima_user_DllExport std::vector<float>& vec_dataf();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DataDDS& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;


private:

    //static int size_int;
    //static int size_float;
    int32_t m_size;
    int32_t m_size2;
    std::vector<int32_t> m_vec_datai;
    std::vector<float> m_vec_dataf;
};

#endif // _DATADDS_H_