// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DdsData.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
 // Remove linker warning LNK4221 on Visual Studio
namespace {
    char dummy;
}  // namespace
#endif  // _WIN32

#include "DdsData.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

uint32_t DdsDataCollection::m_size = 0;
uint32_t DdsAlarmCollection::m_size = 0;
uint32_t DdsConfig::m_size = 0;

DdsData::DdsData()
{
    // m_id_tag com.eprosima.idl.parser.typecode.PrimitiveTypeCode@13b32d7
    m_id_tag = 0;
    // m_dt_opc com.eprosima.idl.parser.typecode.PrimitiveTypeCode@42a311
    m_dt_opc = 0;
    // m_dt_app com.eprosima.idl.parser.typecode.PrimitiveTypeCode@8e7350
    m_dt_app = 0;
    // m_v com.eprosima.idl.parser.typecode.PrimitiveTypeCode@968a59
    m_v = 0.0;
    // m_q com.eprosima.idl.parser.typecode.PrimitiveTypeCode@67ae56
    m_q = 0;

}

DdsData::~DdsData()
{





}

DdsData::DdsData(
    const DdsData& x)
{
    m_id_tag = x.m_id_tag;
    m_dt_opc = x.m_dt_opc;
    m_dt_app = x.m_dt_app;
    m_v = x.m_v;
    m_q = x.m_q;
}

DdsData::DdsData(
    DdsData&& x)
{
    m_id_tag = x.m_id_tag;
    m_dt_opc = x.m_dt_opc;
    m_dt_app = x.m_dt_app;
    m_v = x.m_v;
    m_q = x.m_q;
}

DdsData& DdsData::operator =(
    const DdsData& x)
{

    m_id_tag = x.m_id_tag;
    m_dt_opc = x.m_dt_opc;
    m_dt_app = x.m_dt_app;
    m_v = x.m_v;
    m_q = x.m_q;

    return *this;
}

DdsData& DdsData::operator =(
    DdsData&& x)
{

    m_id_tag = x.m_id_tag;
    m_dt_opc = x.m_dt_opc;
    m_dt_app = x.m_dt_app;
    m_v = x.m_v;
    m_q = x.m_q;

    return *this;
}

size_t DdsData::getMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    return current_alignment - initial_alignment;
}

size_t DdsData::getCdrSerializedSize(
    const DdsData& data,
    size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    return current_alignment - initial_alignment;
}

void DdsData::serialize(
    eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id_tag;
    scdr << m_dt_opc;
    scdr << m_dt_app;
    scdr << m_v;
    scdr << m_q;

}

void DdsData::deserialize(
    eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id_tag;
    dcdr >> m_dt_opc;
    dcdr >> m_dt_app;
    dcdr >> m_v;
    dcdr >> m_q;
}

/*!
 * @brief This function sets a value in member id_tag
 * @param _id_tag New value for member id_tag
 */
void DdsData::id_tag(
    uint32_t _id_tag)
{
    m_id_tag = _id_tag;
}

/*!
 * @brief This function returns the value of member id_tag
 * @return Value of member id_tag
 */
uint32_t DdsData::id_tag() const
{
    return m_id_tag;
}

/*!
 * @brief This function returns a reference to member id_tag
 * @return Reference to member id_tag
 */
uint32_t& DdsData::id_tag()
{
    return m_id_tag;
}

/*!
 * @brief This function sets a value in member dt_opc
 * @param _dt_opc New value for member dt_opc
 */
void DdsData::dt_opc(
    int64_t _dt_opc)
{
    m_dt_opc = _dt_opc;
}

/*!
 * @brief This function returns the value of member dt_opc
 * @return Value of member dt_opc
 */
int64_t DdsData::dt_opc() const
{
    return m_dt_opc;
}

/*!
 * @brief This function returns a reference to member dt_opc
 * @return Reference to member dt_opc
 */
int64_t& DdsData::dt_opc()
{
    return m_dt_opc;
}

/*!
 * @brief This function sets a value in member dt_app
 * @param _dt_app New value for member dt_app
 */
void DdsData::dt_app(
    int64_t _dt_app)
{
    m_dt_app = _dt_app;
}

/*!
 * @brief This function returns the value of member dt_app
 * @return Value of member dt_app
 */
int64_t DdsData::dt_app() const
{
    return m_dt_app;
}

/*!
 * @brief This function returns a reference to member dt_app
 * @return Reference to member dt_app
 */
int64_t& DdsData::dt_app()
{
    return m_dt_app;
}

/*!
 * @brief This function sets a value in member v
 * @param _v New value for member v
 */
void DdsData::v(
    double _v)
{
    m_v = _v;
}

/*!
 * @brief This function returns the value of member v
 * @return Value of member v
 */
double DdsData::v() const
{
    return m_v;
}

/*!
 * @brief This function returns a reference to member v
 * @return Reference to member v
 */
double& DdsData::v()
{
    return m_v;
}

/*!
 * @brief This function sets a value in member q
 * @param _q New value for member q
 */
void DdsData::q(
    int16_t _q)
{
    m_q = _q;
}

/*!
 * @brief This function returns the value of member q
 * @return Value of member q
 */
int16_t DdsData::q() const
{
    return m_q;
}

/*!
 * @brief This function returns a reference to member q
 * @return Reference to member q
 */
int16_t& DdsData::q()
{
    return m_q;
}


size_t DdsData::getKeyMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool DdsData::isKeyDefined()
{
    return false;
}

void DdsData::serializeKey(
    eprosima::fastcdr::Cdr& scdr) const
{
    (void)scdr;

}

DdsAlarm::DdsAlarm()
{
    // m_id_tag com.eprosima.idl.parser.typecode.PrimitiveTypeCode@16c48ac
    m_id_tag = 0;
    // m_dt_opc com.eprosima.idl.parser.typecode.PrimitiveTypeCode@19963d8
    m_dt_opc = 0;
    // m_dt_app com.eprosima.idl.parser.typecode.PrimitiveTypeCode@bbfa04
    m_dt_app = 0;
    // m_state com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1fffcd7
    m_state = 0;

}

DdsAlarm::~DdsAlarm()
{




}

DdsAlarm::DdsAlarm(
    const DdsAlarm& x)
{
    m_id_tag = x.m_id_tag;
    m_dt_opc = x.m_dt_opc;
    m_dt_app = x.m_dt_app;
    m_state = x.m_state;
}

DdsAlarm::DdsAlarm(
    DdsAlarm&& x)
{
    m_id_tag = x.m_id_tag;
    m_dt_opc = x.m_dt_opc;
    m_dt_app = x.m_dt_app;
    m_state = x.m_state;
}

DdsAlarm& DdsAlarm::operator =(
    const DdsAlarm& x)
{

    m_id_tag = x.m_id_tag;
    m_dt_opc = x.m_dt_opc;
    m_dt_app = x.m_dt_app;
    m_state = x.m_state;

    return *this;
}

DdsAlarm& DdsAlarm::operator =(
    DdsAlarm&& x)
{

    m_id_tag = x.m_id_tag;
    m_dt_opc = x.m_dt_opc;
    m_dt_app = x.m_dt_app;
    m_state = x.m_state;

    return *this;
}

size_t DdsAlarm::getMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t DdsAlarm::getCdrSerializedSize(
    const DdsAlarm& data,
    size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void DdsAlarm::serialize(
    eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id_tag;
    scdr << m_dt_opc;
    scdr << m_dt_app;
    scdr << m_state;

}

void DdsAlarm::deserialize(
    eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id_tag;
    dcdr >> m_dt_opc;
    dcdr >> m_dt_app;
    dcdr >> m_state;
}

/*!
 * @brief This function sets a value in member id_tag
 * @param _id_tag New value for member id_tag
 */
void DdsAlarm::id_tag(
    uint32_t _id_tag)
{
    m_id_tag = _id_tag;
}

/*!
 * @brief This function returns the value of member id_tag
 * @return Value of member id_tag
 */
uint32_t DdsAlarm::id_tag() const
{
    return m_id_tag;
}

/*!
 * @brief This function returns a reference to member id_tag
 * @return Reference to member id_tag
 */
uint32_t& DdsAlarm::id_tag()
{
    return m_id_tag;
}

/*!
 * @brief This function sets a value in member dt_opc
 * @param _dt_opc New value for member dt_opc
 */
void DdsAlarm::dt_opc(
    int64_t _dt_opc)
{
    m_dt_opc = _dt_opc;
}

/*!
 * @brief This function returns the value of member dt_opc
 * @return Value of member dt_opc
 */
int64_t DdsAlarm::dt_opc() const
{
    return m_dt_opc;
}

/*!
 * @brief This function returns a reference to member dt_opc
 * @return Reference to member dt_opc
 */
int64_t& DdsAlarm::dt_opc()
{
    return m_dt_opc;
}

/*!
 * @brief This function sets a value in member dt_app
 * @param _dt_app New value for member dt_app
 */
void DdsAlarm::dt_app(
    int64_t _dt_app)
{
    m_dt_app = _dt_app;
}

/*!
 * @brief This function returns the value of member dt_app
 * @return Value of member dt_app
 */
int64_t DdsAlarm::dt_app() const
{
    return m_dt_app;
}

/*!
 * @brief This function returns a reference to member dt_app
 * @return Reference to member dt_app
 */
int64_t& DdsAlarm::dt_app()
{
    return m_dt_app;
}

/*!
 * @brief This function sets a value in member state
 * @param _state New value for member state
 */
void DdsAlarm::state(
    uint32_t _state)
{
    m_state = _state;
}

/*!
 * @brief This function returns the value of member state
 * @return Value of member state
 */
uint32_t DdsAlarm::state() const
{
    return m_state;
}

/*!
 * @brief This function returns a reference to member state
 * @return Reference to member state
 */
uint32_t& DdsAlarm::state()
{
    return m_state;
}


size_t DdsAlarm::getKeyMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool DdsAlarm::isKeyDefined()
{
    return false;
}

void DdsAlarm::serializeKey(
    eprosima::fastcdr::Cdr& scdr) const
{
    (void)scdr;

}

DdsStatus::DdsStatus()
{
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1ee9989
    m_id = 0;
    // m_status com.eprosima.idl.parser.typecode.PrimitiveTypeCode@13ad2d6
    m_status = 0;
    // m_code com.eprosima.idl.parser.typecode.PrimitiveTypeCode@85bdee
    m_code = 0;
    // m_message com.eprosima.idl.parser.typecode.StringTypeCode@e92674
    m_message = "";

}

DdsStatus::~DdsStatus()
{




}

DdsStatus::DdsStatus(
    const DdsStatus& x)
{
    m_id = x.m_id;
    m_status = x.m_status;
    m_code = x.m_code;
    m_message = x.m_message;
}

DdsStatus::DdsStatus(
    DdsStatus&& x)
{
    m_id = x.m_id;
    m_status = x.m_status;
    m_code = x.m_code;
    m_message = std::move(x.m_message);
}

DdsStatus& DdsStatus::operator =(
    const DdsStatus& x)
{

    m_id = x.m_id;
    m_status = x.m_status;
    m_code = x.m_code;
    m_message = x.m_message;

    return *this;
}

DdsStatus& DdsStatus::operator =(
    DdsStatus&& x)
{

    m_id = x.m_id;
    m_status = x.m_status;
    m_code = x.m_code;
    m_message = std::move(x.m_message);

    return *this;
}

size_t DdsStatus::getMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t DdsStatus::getCdrSerializedSize(
    const DdsStatus& data,
    size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    return current_alignment - initial_alignment;
}

void DdsStatus::serialize(
    eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id;
    scdr << m_status;
    scdr << m_code;
    scdr << m_message;

}

void DdsStatus::deserialize(
    eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id;
    dcdr >> m_status;
    dcdr >> m_code;
    dcdr >> m_message;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void DdsStatus::id(
    uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t DdsStatus::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& DdsStatus::id()
{
    return m_id;
}

/*!
 * @brief This function sets a value in member status
 * @param _status New value for member status
 */
void DdsStatus::status(
    uint32_t _status)
{
    m_status = _status;
}

/*!
 * @brief This function returns the value of member status
 * @return Value of member status
 */
uint32_t DdsStatus::status() const
{
    return m_status;
}

/*!
 * @brief This function returns a reference to member status
 * @return Reference to member status
 */
uint32_t& DdsStatus::status()
{
    return m_status;
}

/*!
 * @brief This function sets a value in member code
 * @param _code New value for member code
 */
void DdsStatus::code(
    uint32_t _code)
{
    m_code = _code;
}

/*!
 * @brief This function returns the value of member code
 * @return Value of member code
 */
uint32_t DdsStatus::code() const
{
    return m_code;
}

/*!
 * @brief This function returns a reference to member code
 * @return Reference to member code
 */
uint32_t& DdsStatus::code()
{
    return m_code;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void DdsStatus::message(
    const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void DdsStatus::message(
    std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& DdsStatus::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& DdsStatus::message()
{
    return m_message;
}

size_t DdsStatus::getKeyMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool DdsStatus::isKeyDefined()
{
    return false;
}

void DdsStatus::serializeKey(
    eprosima::fastcdr::Cdr& scdr) const
{
    (void)scdr;

}

DdsConfig::DdsConfig()
{
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@100d6b1
    m_id = 0;
    // m_config_size com.eprosima.idl.parser.typecode.PrimitiveTypeCode@fd02e5
    m_config_size = 0;
    // m_message com.eprosima.idl.parser.typecode.StringTypeCode@45f292
    m_message = "";

}

DdsConfig::~DdsConfig()
{



}

DdsConfig::DdsConfig(
    const DdsConfig& x)
{
    m_id = x.m_id;
    m_config_size = x.m_config_size;
    m_message = x.m_message;
}

DdsConfig::DdsConfig(
    DdsConfig&& x)
{
    m_id = x.m_id;
    m_config_size = x.m_config_size;
    m_message = std::move(x.m_message);
}

DdsConfig& DdsConfig::operator =(
    const DdsConfig& x)
{

    m_id = x.m_id;
    m_config_size = x.m_config_size;
    m_message = x.m_message;

    return *this;
}

DdsConfig& DdsConfig::operator =(
    DdsConfig&& x)
{

    m_id = x.m_id;
    m_config_size = x.m_config_size;
    m_message = std::move(x.m_message);

    return *this;
}

size_t DdsConfig::getMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + DdsConfig::getSize() + 1;


    return current_alignment - initial_alignment;
}

size_t DdsConfig::getCdrSerializedSize(
    const DdsConfig& data,
    size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    return current_alignment - initial_alignment;
}

void DdsConfig::serialize(
    eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id;
    scdr << m_config_size;
    scdr << m_message;

}

void DdsConfig::deserialize(
    eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id;
    dcdr >> m_config_size;
    dcdr >> m_message;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void DdsConfig::id(
    uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t DdsConfig::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& DdsConfig::id()
{
    return m_id;
}

/*!
 * @brief This function sets a value in member config_size
 * @param _config_size New value for member config_size
 */
void DdsConfig::config_size(
    uint32_t _config_size)
{
    m_config_size = _config_size;
}

/*!
 * @brief This function returns the value of member config_size
 * @return Value of member config_size
 */
uint32_t DdsConfig::config_size() const
{
    return m_config_size;
}

/*!
 * @brief This function returns a reference to member config_size
 * @return Reference to member config_size
 */
uint32_t& DdsConfig::config_size()
{
    return m_config_size;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void DdsConfig::message(
    const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void DdsConfig::message(
    std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& DdsConfig::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& DdsConfig::message()
{
    return m_message;
}

size_t DdsConfig::getKeyMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool DdsConfig::isKeyDefined()
{
    return false;
}

void DdsConfig::serializeKey(
    eprosima::fastcdr::Cdr& scdr) const
{
    (void)scdr;

}

DdsDataCollection::DdsDataCollection()
{
    // m_sensor_array com.eprosima.idl.parser.typecode.SequenceTypeCode@8931cf


}

DdsDataCollection::~DdsDataCollection()
{
}

DdsDataCollection::DdsDataCollection(
    const DdsDataCollection& x)
{
    m_sensor_array = x.m_sensor_array;
}

DdsDataCollection::DdsDataCollection(
    DdsDataCollection&& x)
{
    m_sensor_array = std::move(x.m_sensor_array);
}

DdsDataCollection& DdsDataCollection::operator =(
    const DdsDataCollection& x)
{

    m_sensor_array = x.m_sensor_array;

    return *this;
}

DdsDataCollection& DdsDataCollection::operator =(
    DdsDataCollection&& x)
{

    m_sensor_array = std::move(x.m_sensor_array);

    return *this;
}

size_t DdsDataCollection::getMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for (size_t a = 0; a < DdsDataCollection::getSize(); ++a)
    {
        current_alignment += DdsData::getMaxCdrSerializedSize(current_alignment);
    }

    return current_alignment - initial_alignment;
}

size_t DdsDataCollection::getCdrSerializedSize(
    const DdsDataCollection& data,
    size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for (size_t a = 0; a < data.sensor_array().size(); ++a)
    {
        current_alignment += DdsData::getCdrSerializedSize(data.sensor_array().at(a), current_alignment);
    }

    return current_alignment - initial_alignment;
}

void DdsDataCollection::serialize(
    eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_sensor_array;
}

void DdsDataCollection::deserialize(
    eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_sensor_array;
}

/*!
 * @brief This function copies the value in member sensor_array
 * @param _sensor_array New value to be copied in member sensor_array
 */
void DdsDataCollection::sensor_array(
    const std::vector<DdsData>& _sensor_array)
{
    m_sensor_array = _sensor_array;
}

/*!
 * @brief This function moves the value in member sensor_array
 * @param _sensor_array New value to be moved in member sensor_array
 */
void DdsDataCollection::sensor_array(
    std::vector<DdsData>&& _sensor_array)
{
    m_sensor_array = std::move(_sensor_array);
}

/*!
 * @brief This function returns a constant reference to member sensor_array
 * @return Constant reference to member sensor_array
 */
const std::vector<DdsData>& DdsDataCollection::sensor_array() const
{
    return m_sensor_array;
}

/*!
 * @brief This function returns a reference to member sensor_array
 * @return Reference to member sensor_array
 */
std::vector<DdsData>& DdsDataCollection::sensor_array()
{
    return m_sensor_array;
}

size_t DdsDataCollection::getKeyMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool DdsDataCollection::isKeyDefined()
{
    return false;
}

void DdsDataCollection::serializeKey(
    eprosima::fastcdr::Cdr& scdr) const
{
    (void)scdr;

}

DdsAlarmCollection::DdsAlarmCollection()
{
    // m_alarms_array com.eprosima.idl.parser.typecode.SequenceTypeCode@14c4973


}

DdsAlarmCollection::~DdsAlarmCollection()
{
}

DdsAlarmCollection::DdsAlarmCollection(
    const DdsAlarmCollection& x)
{
    m_alarms_array = x.m_alarms_array;
}

DdsAlarmCollection::DdsAlarmCollection(
    DdsAlarmCollection&& x)
{
    m_alarms_array = std::move(x.m_alarms_array);
}

DdsAlarmCollection& DdsAlarmCollection::operator =(
    const DdsAlarmCollection& x)
{

    m_alarms_array = x.m_alarms_array;

    return *this;
}

DdsAlarmCollection& DdsAlarmCollection::operator =(
    DdsAlarmCollection&& x)
{

    m_alarms_array = std::move(x.m_alarms_array);

    return *this;
}

size_t DdsAlarmCollection::getMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for (size_t a = 0; a < DdsAlarmCollection::getSize(); ++a)
    {
        current_alignment += DdsAlarm::getMaxCdrSerializedSize(current_alignment);
    }

    return current_alignment - initial_alignment;
}

size_t DdsAlarmCollection::getCdrSerializedSize(
    const DdsAlarmCollection& data,
    size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for (size_t a = 0; a < data.alarms_array().size(); ++a)
    {
        current_alignment += DdsAlarm::getCdrSerializedSize(data.alarms_array().at(a), current_alignment);
    }

    return current_alignment - initial_alignment;
}

void DdsAlarmCollection::serialize(
    eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_alarms_array;
}

void DdsAlarmCollection::deserialize(
    eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_alarms_array;
}

/*!
 * @brief This function copies the value in member alarms_array
 * @param _alarms_array New value to be copied in member alarms_array
 */
void DdsAlarmCollection::alarms_array(
    const std::vector<DdsAlarm>& _alarms_array)
{
    m_alarms_array = _alarms_array;
}

/*!
 * @brief This function moves the value in member alarms_array
 * @param _alarms_array New value to be moved in member alarms_array
 */
void DdsAlarmCollection::alarms_array(
    std::vector<DdsAlarm>&& _alarms_array)
{
    m_alarms_array = std::move(_alarms_array);
}

/*!
 * @brief This function returns a constant reference to member alarms_array
 * @return Constant reference to member alarms_array
 */
const std::vector<DdsAlarm>& DdsAlarmCollection::alarms_array() const
{
    return m_alarms_array;
}

/*!
 * @brief This function returns a reference to member alarms_array
 * @return Reference to member alarms_array
 */
std::vector<DdsAlarm>& DdsAlarmCollection::alarms_array()
{
    return m_alarms_array;
}

size_t DdsAlarmCollection::getKeyMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool DdsAlarmCollection::isKeyDefined()
{
    return false;
}

void DdsAlarmCollection::serializeKey(
    eprosima::fastcdr::Cdr& scdr) const
{
    (void)scdr;

}
